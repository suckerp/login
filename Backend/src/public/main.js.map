{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.interceptor.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { CredentialsService } from './app.service'\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  template: `\r\n    <button (click) = \"login()\">send</button>\r\n    <button (click) = \"token()\">check</button>\r\n    <div>\r\n      <input #email>\r\n      <input type=\"password\" #pw>\r\n      <button (click) = \"newUser(email.value, pw.value)\">neuer User</button>\r\n    </div>\r\n\r\n    <div>\r\n      <input #email1>\r\n      <input type=\"password\" #pw1>\r\n      <button (click) = \"checkUser(email1.value, pw1.value)\">check User</button>\r\n    </div>\r\n  `\r\n})\r\n\r\nexport class AppComponent {\r\n  title = 'Frontend';\r\n\r\n  constructor(\r\n    private credentialsService:CredentialsService,\r\n    private http:HttpClient\r\n  ){}\r\n\r\n  login(){\r\n    this.http.post('https://localhost/login', {\r\n      email: \"test1@test.de\",\r\n      pw: \"test\"\r\n    })\r\n    .subscribe(\r\n      (x:any) => {\r\n        this.credentialsService.token = x.token\r\n      },\r\n      e => {\r\n        console.log(e)\r\n      }\r\n    )\r\n  }\r\n\r\n  token(){\r\n    this.http.post('https://localhost/token', {\r\n    })\r\n    .subscribe(\r\n      (x:any) => {\r\n        console.log(x)\r\n      },\r\n      e => {\r\n        console.log(e)\r\n      }\r\n    )\r\n  }\r\n\r\n  newUser(email, pw) {\r\n    this.http.post('http://localhost:3000/newUser', {\r\n      email,\r\n      pw\r\n    })\r\n    .subscribe(\r\n      (x:any) => {\r\n        if (x.auth) {\r\n          this.credentialsService.token = x.token\r\n          console.log(x.token)\r\n        }\r\n      },\r\n      e => console.log(e)\r\n    )\r\n  }\r\n\r\n  checkUser(email, pw) {\r\n    this.http.post('http://localhost:3000/checkUser', {\r\n      email,\r\n      pw\r\n    })\r\n    .subscribe(\r\n      (x:any) => {\r\n        console.log(x)\r\n      },\r\n      e => console.log(e)\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core'\r\nimport {\r\n    HttpRequest,\r\n    HttpHandler,\r\n    HttpInterceptor\r\n} from '@angular/common/http'\r\n\r\nimport { CredentialsService } from './app.service'\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n\r\n    constructor(\r\n        private credentialsService:CredentialsService\r\n    ){}\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler) {\r\n        return next.handle(\r\n            request.clone({\r\n                setHeaders: {\r\n                    Authorization: 'Bearer ' + this.credentialsService.token,\r\n                    token: this.credentialsService.token\r\n                }\r\n            })\r\n        )\r\n    }\r\n}","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http'\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http'\r\nimport { TokenInterceptor } from './app.interceptor'\r\nimport { CredentialsService } from './app.service'\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [\r\n    CredentialsService,\r\n    {provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true}\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core'\r\n\r\n@Injectable()\r\nexport class CredentialsService {\r\n    token:string = \"\"\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":""}